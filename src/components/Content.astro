---
import { AiOutlineCloseCircle } from 'react-icons/ai/index.js'

export interface Props {
  className?: string
}
const { className = '' } = Astro.props
---

<article class={`article max-w-3xl flex flex-col ${className}`}>
  <slot />

  <div id="myModal" class="modal">
    <div class="modal-overlay"></div>
    <div class="modal-container">
      <span class="close">
        <AiOutlineCloseCircle />
      </span>
      <div class="image-wrapper">
        <img class="modal-content" id="img01" alt="预览图片" />
      </div>
      <div id="caption" class="caption"></div>
      <div class="zoom-controls">
        <button class="zoom-btn zoom-out" id="zoomOut">
          <svg
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <circle cx="11" cy="11" r="8"></circle>
            <path d="m21 21-4.35-4.35"></path>
            <line x1="8" y1="11" x2="14" y2="11"></line>
          </svg>
        </button>
        <span class="zoom-level" id="zoomLevel">100%</span>
        <button class="zoom-btn zoom-in" id="zoomIn">
          <svg
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <circle cx="11" cy="11" r="8"></circle>
            <path d="m21 21-4.35-4.35"></path>
            <line x1="11" y1="8" x2="11" y2="14"></line>
            <line x1="8" y1="11" x2="14" y2="11"></line>
          </svg>
        </button>
        <button class="zoom-btn reset-zoom" id="resetZoom">
          <svg
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path>
            <path d="M21 3v5h-5"></path>
            <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"
            ></path>
            <path d="M3 21v-5h5"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</article>

<style>
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    inset: 0;
    width: 100%;
    height: 100%;
    background: transparent;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .modal.show {
    display: flex;
    opacity: 1;
  }

  .modal-overlay {
    position: absolute;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(4px);
  }

  .modal-container {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    padding: 20px;
    box-sizing: border-box;
  }

  .image-wrapper {
    position: relative;
    max-width: 90vw;
    max-height: 80vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-content {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    border-radius: 8px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
    transition: transform 0.3s ease;
    cursor: default;
    transform-origin: center;
  }

  .modal-content.draggable {
    cursor: grab;
  }

  .modal-content.dragging {
    cursor: grabbing;
  }

  .close {
    position: fixed;
    top: 20px;
    right: 30px;
    color: #ffffff;
    font-size: 32px;
    font-weight: bold;
    cursor: pointer;
    z-index: 1001;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .close:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.1);
  }

  .caption {
    color: #ffffff;
    text-align: center;
    margin-top: 15px;
    font-size: 16px;
    max-width: 80%;
    padding: 10px 20px;
    background: rgba(0, 0, 0, 0.6);
    border-radius: 20px;
    backdrop-filter: blur(10px);
  }

  .zoom-controls {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-top: 20px;
    padding: 10px 20px;
    background: rgba(0, 0, 0, 0.7);
    border-radius: 25px;
    backdrop-filter: blur(10px);
  }

  .zoom-btn {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    color: #ffffff;
    cursor: pointer;
    padding: 8px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 36px;
    height: 36px;
  }

  .zoom-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.05);
  }

  .zoom-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .zoom-level {
    color: #ffffff;
    font-size: 14px;
    font-weight: 500;
    min-width: 45px;
    text-align: center;
  }

  /* 移动端优化 */
  @media (max-width: 768px) {
    .close {
      top: 15px;
      right: 15px;
      font-size: 28px;
      width: 45px;
      height: 45px;
    }

    .modal-container {
      padding: 10px;
    }

    .image-wrapper {
      max-width: 95vw;
      max-height: 75vh;
    }

    .caption {
      font-size: 14px;
      margin-top: 10px;
      max-width: 90%;
    }

    .zoom-controls {
      gap: 10px;
      margin-top: 15px;
      padding: 8px 15px;
    }

    .zoom-btn {
      min-width: 32px;
      height: 32px;
      padding: 6px;
    }

    .zoom-level {
      font-size: 12px;
      min-width: 40px;
    }
  }

  /* 加载动画 */
  .modal-content {
    animation: fadeInScale 0.3s ease-out;
  }

  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
</style>

<script>
  const modal = document.getElementById('myModal')
  const modalImg = document.getElementById('img01') as HTMLImageElement
  const caption = document.getElementById('caption')
  const zoomLevel = document.getElementById('zoomLevel')
  const zoomInBtn = document.getElementById('zoomIn')
  const zoomOutBtn = document.getElementById('zoomOut')
  const resetZoomBtn = document.getElementById('resetZoom')
  const imgs = document.querySelectorAll(
    'article img'
  ) as NodeListOf<HTMLImageElement>

  let currentZoom = 1
  let isDragging = false
  let dragStartX = 0
  let dragStartY = 0
  let imgStartX = 0
  let imgStartY = 0
  let isOpen = false

  // 为每个图片添加点击事件
  imgs.forEach(function (img) {
    img.style.cursor = 'pointer'
    img.addEventListener('click', e => {
      e.stopPropagation()
      openModal(img)
    })
  })

  // 打开模态框
  function openModal(img: HTMLImageElement) {
    if (isOpen) return

    if (modal && modalImg) {
      modal.style.display = 'flex'
      // 强制重绘以确保 transition 生效
      modal.offsetHeight
      modal.classList.add('show')
      document.body.style.overflow = 'hidden'

      modalImg.src = img.src
      modalImg.alt = img.alt || '预览图片'

      // 设置说明文字
      if (caption) {
        caption.textContent = img.alt || img.title || ''
        caption.style.display = caption.textContent ? 'block' : 'none'
      }

      // 重置缩放状态
      resetZoom()
      isOpen = true
    }
  }

  // 关闭模态框
  function closeModal() {
    if (modal) {
      modal.classList.remove('show')
      resetZoom() // 关闭时重置缩放
      setTimeout(() => {
        modal.style.display = 'none'
        document.body.style.overflow = 'auto'
      }, 300) // 等待动画完成
      isOpen = false
    }
  }

  // 关闭按钮点击事件
  const closeBtn = document.getElementsByClassName('close')[0]
  closeBtn?.addEventListener('click', e => {
    e.stopPropagation()
    closeModal()
  })

  // 点击背景关闭模态框 - 点击任何非图片区域都关闭
  modal?.addEventListener('click', e => {
    // 如果点击的不是图片本身，就关闭modal
    if (e.target !== modalImg && !isDragging) {
      closeModal()
    }
  })

  // 缩放和拖拽功能
  function updateZoom() {
    if (modalImg && zoomLevel) {
      modalImg.style.transform = `scale(${currentZoom}) translate(${imgStartX}px, ${imgStartY}px)`
      zoomLevel.textContent = `${Math.round(currentZoom * 100)}%`

      // 更新按钮状态
      if (zoomOutBtn)
        (zoomOutBtn as HTMLButtonElement).disabled = currentZoom <= 0.5
      if (zoomInBtn)
        (zoomInBtn as HTMLButtonElement).disabled = currentZoom >= 3

      // 设置拖拽样式
      if (currentZoom > 1) {
        modalImg.classList.add('draggable')
      } else {
        modalImg.classList.remove('draggable')
        imgStartX = 0
        imgStartY = 0
      }
    }
  }

  function resetZoom() {
    currentZoom = 1
    imgStartX = 0
    imgStartY = 0
    updateZoom()
  }

  // 缩放按钮事件
  zoomInBtn?.addEventListener('click', e => {
    e.stopPropagation()
    if (currentZoom < 3) {
      currentZoom = Math.min(currentZoom + 0.25, 3)
      updateZoom()
    }
  })

  zoomOutBtn?.addEventListener('click', e => {
    e.stopPropagation()
    if (currentZoom > 0.5) {
      currentZoom = Math.max(currentZoom - 0.25, 0.5)
      updateZoom()
    }
  })

  resetZoomBtn?.addEventListener('click', e => {
    e.stopPropagation()
    resetZoom()
  })

  // 图片拖拽功能
  modalImg?.addEventListener('mousedown', e => {
    if (currentZoom > 1) {
      e.preventDefault()
      e.stopPropagation()
      isDragging = true
      dragStartX = e.clientX
      dragStartY = e.clientY
      modalImg.classList.add('dragging')
    }
  })

  document.addEventListener('mousemove', e => {
    if (isDragging && currentZoom > 1) {
      e.preventDefault()
      const deltaX = e.clientX - dragStartX
      const deltaY = e.clientY - dragStartY
      imgStartX += deltaX
      imgStartY += deltaY
      dragStartX = e.clientX
      dragStartY = e.clientY
      updateZoom()
    }
  })

  document.addEventListener('mouseup', () => {
    if (isDragging) {
      setTimeout(() => {
        isDragging = false
      }, 100)
      modalImg?.classList.remove('dragging')
    }
  })

  // 触摸拖拽支持
  modalImg?.addEventListener('touchstart', e => {
    if (currentZoom > 1 && e.touches.length === 1) {
      e.preventDefault()
      e.stopPropagation()
      isDragging = true
      dragStartX = e.touches[0].clientX
      dragStartY = e.touches[0].clientY
    }
  })

  document.addEventListener('touchmove', e => {
    if (isDragging && currentZoom > 1 && e.touches.length === 1) {
      e.preventDefault()
      const touch = e.touches[0]
      const deltaX = touch.clientX - dragStartX
      const deltaY = touch.clientY - dragStartY
      imgStartX += deltaX
      imgStartY += deltaY
      dragStartX = touch.clientX
      dragStartY = touch.clientY
      updateZoom()
    }
  })

  document.addEventListener('touchend', () => {
    if (isDragging) {
      isDragging = false
      modalImg?.classList.remove('dragging')
    }
  })

  // ESC 键关闭模态框
  document.addEventListener('keydown', e => {
    if (e.key === 'Escape' && modal?.classList.contains('show')) {
      closeModal()
    }
  })

  // 阻止图片拖拽
  modalImg?.addEventListener('dragstart', e => {
    e.preventDefault()
  })
</script>
